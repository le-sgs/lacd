// lex
%{
    #include<stdio.h>
    #include "y.tab.h"
%}

%%
"switch" { return SWITCH; }
"case" { return CASE; }
"break" { return BREAK; }
"{" { return LBRACE; }
"}" { return RBRACE; }
[ \t\n] ;  // Ignore whitespace
[a-zA-Z][a-zA-Z0-9_]* { return ID; }
[0-9]+ { yylval = atoi(yytext); return NUMBER; }

. { /* Ignore other characters */ }

%%

// yacc
%{
    #include<stdio.h>
    #include<stdlib.h>
    int valid = 1;
%}

%token SWITCH CASE BREAK LBRACE RBRACE ID NUMBER

%%
program: switch_statement
        ;

switch_statement: SWITCH '(' ID ')' LBRACE case_statements RBRACE
                ;

case_statements: case_statement
              | case_statements case_statement
              ;

case_statement: CASE NUMBER ':' statement BREAK ';'
              ;


%%

int yyerror(const char *s)
{
    printf("Not Valid Switch-Case Syntax near %s\n", yytext);
    valid = 0;
    return 0;
}

int main()
{
    yyparse();
    if (valid)
    {
        printf("Valid Syntax\n");
    }
    return 0;
}
