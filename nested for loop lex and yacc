//LEX
%{
    #include<stdio.h>
    #include "y.tab.h"
%}

%%
"for" { return FOR; }
"(" { return LPAREN; }
")" { return RPAREN; }
"int|double|float" { return TYPE; }
[a-zA-Z_][a-zA-Z0-9_]* { return ID; }
"=" { return EQ; }
[0-9]+ { return NUMBER; }
";" { return SEMICOLON; }
"{" { return LBRACE; }
"}" { return RBRACE; }
[<>] { return COMP; }
[<>][=] { return COMP; }
[+][+] { return UPD; }
[-][-] { return UPD; }
[ \t\n] ;  // Ignore whitespace
. { /* Ignore other characters */ }
%%

int yywrap()
{
    return 1;
}

//yacc
%{
    #include<stdio.h>
    int valid = 1;
%}

%token FOR LPAREN RPAREN TYPE ID EQ NUMBER SEMICOLON LBRACE RBRACE COMP UPD

%%
program: for_statement
        ;

for_statement: FOR LPAREN TYPE ID EQ NUMBER SEMICOLON ID COMP NUMBER SEMICOLON ID UPD RPAREN LBRACE
                for_statements
              RBRACE
              ;

for_statements: for_statement
              | for_statements for_statement
              ;

%%

int yyerror()
{
    printf("Not Valid For Syntax\n");
    valid = 0;
    return 0;
}

int main()
{
    yyparse();
    if (valid)
    {
        printf("Valid Syntax\n");
    }
    return 0;
}


---------- OR -----------

LEX
%{
	#include<stdio.h>
	#include "y.tab.h"
%}
%%
for {return FOR;}
[(] {return LSMALL;}
[)] {return RSMALL;}
[{] {return LBIG;}
[}] {return RBIG;}
int|char|double|float {return TYPE;}
[a-zA-Z_][a-zA-Z0-9_]* {return ID;}
[=] {return EQ;}
[0-9]+ {return DIGIT;}
[;] {return COMMA;}
[<>] {return COMP;}
[<>][=] {return COMP;}
[+][+]|[-][-] {return UPD;}
[\n] {return 0;}
[ ] {}
%%
int yywrap()
{	
	return 1;
}

YACC
%{
	#include<stdio.h>
	int valid=1;
%}
%token FOR LSMALL TYPE ID EQ COMMA COMP DIGIT UPD RSMALL LBIG RBIG
%%
FORSTMT:FOR LSMALL TYPE ID EQ DIGIT COMMA ID COMP DIGIT COMMA ID UPD RSMALL LBIG FORSTMT RBIG|
%%
int yyerror()
{
	valid=0;
	printf("INVALID EXP\n");
}
int main()
{
	yyparse();
	if(valid)
	{
		printf("VALID\n");
	}
	return 0;
}
