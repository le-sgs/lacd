//LEX
%{
    #include<stdio.h>
    #include "y.tab.h"
%}

%%
"while" { return WHILE; }
"(" { return LPAREN; }
")" { return RPAREN; }
"int|double|float" { return TYPE; }
[a-zA-Z_][a-zA-Z0-9_]* { return ID; }
"=" { return EQ; }
[0-9]+ { return NUMBER; }
";" { return SEMICOLON; }
"{" { return LBRACE; }
"}" { return RBRACE; }
[<>] { return COMP; }
[<>][=] { return COMP; }
[+][+] { return UPD; }
[-][-] { return UPD; }
[ \t\n] ;  // Ignore whitespace
. { /* Ignore other characters */ }
%%

int yywrap()
{
    return 1;
}

//YACC
%{
    #include<stdio.h>
    int valid = 1;
%}

%token WHILE LPAREN RPAREN TYPE ID EQ NUMBER SEMICOLON LBRACE RBRACE COMP UPD

%%
program: while_statement
        ;

while_statement: WHILE LPAREN COMP RPAREN LBRACE
                    statements
                RBRACE
                ;

statements: /* Add your rules for statements within a while loop */
          ;

%%

int yyerror()
{
    printf("Not Valid While Syntax\n");
    valid = 0;
    return 0;
}

int main()
{
    yyparse();
    if (valid)
    {
        printf("Valid Syntax\n");
    }
    return 0;
}

